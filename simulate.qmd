---
title: "Crap game"
author: "Dhanushka"
format: html
editor: visual
---

## Running Code

Following code summarizes the crap game for just one game and it produces a data-frame.

```{r}

library(dplyr);library(ggplot2);library(tidyverse);library(stringr)

## roll the dice
roll_dice = function(){
  dice1 = sample(1:6, 1)
  dice2 = sample(1:6, 1)
  return(dice1 + dice2)
}

## generate some variables to store the important results
id = 1   ## number of iterations
#roll = NA
outcome = c()
result = c()

roll1 = roll_dice()
result = append(result, roll1)

if(roll1 %in% c(2, 3, 12)) {
outcome = append(outcome, "lose")
} else if (roll1 %in% c(7, 11)) {
outcome = append(outcome, "win")
} else {
res = c()
point = roll1
while(TRUE) {
  roll2 = roll_dice()  # Correct variable name
  id = id + 1
  res = append(res, roll2)  # Append roll2 to the result vector
  outcome = append(outcome, "continue playing")  # Append outcome for this iteration

  if (roll2 == 7) {
    outcome = append(outcome, "lose")  # Outcome for this roll
    break
  } else if (roll2 == point) {
    outcome = append(outcome, "win")  # Outcome for this roll
    break
  }
}
result = append(result, res)  # Append the subsequent rolls to result
}

# Print the results in a readable format
print(paste("ID:", id, "Rolls:", toString(result), "Outcome:", toString(outcome)))


## summarized the results to a single run
summarized = function(id, result, outcome){
  df = data.frame(id = rep(id, times = id ), result, outcome)
  n_rolls = df$id[1]
  outcome = df$outcome[nrow(df)]
  point = if(id == 1){
    point = NA
  }
  else{
    point = df$result[1]
  }
  return(tibble(n_rolls, outcome, point))
}

summarized(id, result = result, outcome)
```

Developed the following function so that we can run this for many times by just calling the function, \*\*"crap_game1"\*\*

```{r}
#Function

crap_game1 =  function(){

  ## generate some variables to store the important results
  id = 1   ## number of iterations
  #roll = NA
  outcome = c()
  result = c()

  roll1 = roll_dice()
  result = append(result, roll1)

  if(roll1 %in% c(2, 3, 12)) {
    outcome = append(outcome, "lose")
  } else if (roll1 %in% c(7, 11)) {
    outcome = append(outcome, "win")
  } else {
    res = c()
    point = roll1
    while(TRUE) {
      roll2 = roll_dice()  # Correct variable name
      id = id + 1
      res = append(res, roll2)  # Append roll2 to the result vector
      outcome = append(outcome, "continue playing")  # Append outcome for this iteration

      if (roll2 == 7) {
        outcome = append(outcome, "lose")  # Outcome for this roll
        break
      } else if (roll2 == point) {
        outcome = append(outcome, "win")  # Outcome for this roll
        break
      }
    }
    result = append(result, res)  # Append the subsequent rolls to result
  }


  # Print the results in a readable format
  print(paste("ID:", id, "Rolls:", toString(result), "Outcome:", toString(outcome)))


  ## summarized the results to a single run
  summarized = function(id, result, outcome){
    df = data.frame(id = rep(id, times = id ), result, outcome)
    n_rolls = df$id[1]
    outcome = df$outcome[nrow(df)]
    point = if(id == 1){
      point = NA
    }
    else{
      point = df$result[1]
    }
    return(tibble(n_rolls, outcome, point))
  }

  print(summarized(id, result = result, outcome))



}
## Example Run

crap_game1()
```

Following code produces a summarized data-frame for "N" number of games. And based on that we can summarize the wins and etc.

```{r}
# Define the crap_game function
simulate_craps_game = function(n = 100) {
  # Initialize a list to store summaries for each game
  game_summaries = list()

  for (i in 1:n) {
    id = 1   # Initialize the roll counter (number of rolls in the game)
    outcome = NA   # The final outcome of the game (win or lose)
    rolls = 0      # Number of rolls in the current game
    point = NA     # Initial point is NA by default

    # Roll the first dice (initial roll)
    roll1 = roll_dice()
    rolls = rolls + 1  # Increment the roll counter

    # Check if it's a win or lose on the first roll
    if (roll1 %in% c(2, 3, 12)) {
      outcome = "lose"  # Immediate loss
    } else if (roll1 %in% c(7, 11)) {
      outcome = "win"   # Immediate win
    } else {
      # If no immediate win/lose, set the point to the first roll
      point = roll1

      # Otherwise, keep rolling until the point is matched or a 7 is rolled
      while (TRUE) {
        roll2 = roll_dice()  # Roll the dice again
        rolls = rolls + 1  # Increment the roll counter

        if (roll2 == 7) {
          outcome = "lose"  # 7 means lose
          break
        } else if (roll2 == point) {
          outcome = "win"   # Point matched, win
          break
        }
      }
    }

    # Create a summary of the game
    game_summary <- data.frame(
      GameID = i,       # Game identifier
      Point = point,  # The initial roll (point), NA if win/lose on first roll
      TotalRolls = rolls,   # Total number of rolls (1 if immediate win/lose)
      Outcome = outcome     # Final outcome (win or lose)
    )

    # Store the summary for this game in the list
    game_summaries[[i]] = game_summary
  }

  # Combine all game summaries into a single data frame
  final_summary = do.call(rbind, game_summaries)

  # Return the final summarized results for all games
  return(final_summary)
}

# Example run the function for 10 games
x= simulate_craps_game(n = 10)
x

```

**This function summarizes the data frame and calculate the winning percentage**

```{r}
###This function summarizes the data frame and calculate the winning percentage ###

summarize_probability = function(df){
  wins = numeric()
  for (i in 1:nrow(df)){
    win = df[4][[1]][i]
    if (win == "win"){
      wins = append(wins, 1)
    }
    else{
      wins = append(wins, 0)
    }
  }
  y = (sum(wins)/(nrow(df)))*100
  x = paste("Your winning percentage after playing ",nrow(df), " games is: ", y, "%" )
  return(x)
}

x= simulate_craps_game(n = 10)

k = summarize_probability(x)
k

```

**the following function produces the all the probabilities for the specified trails and return a histogram of the frequency distribution.**

```{r}
############### The variation of probability of winning for each game.############

## simulate 10 trials of 1000 games in each trail and calculate the probability of them.
## the function produces the all the probabilities for the specified trails and return a histogram
## of the frequency distribution.

variance_prob = function(n, iter = 10){
  w = character()
  for (i in 1:iter){
    xx = simulate_craps_game(n)
    k = summarize_probability(xx)
    prob = str_extract(str_squish(k), "\\d+(\\.\\d+)?\\s?%")
    w = append(w, prob)
  }
  prob_numeric = as.numeric(gsub("%", "", w))
  print(prob_numeric)
  var_p = paste("variance is: ", var(prob_numeric)," and the Standard Dev : ", sd(prob_numeric))
  print(var_p)

  return(hist(prob_numeric, col = "blue", main = "Histogram of percentage of winning", xlab = "percentage of winning"))
}

var_p = variance_prob(n = 100, iter = 100)


```

**Analysis of the winning probabilities at different scenarios.**

**1st Scenario.**

```{r}
## 01) 
######## Analysis on the percentage of winning the game in the 1st attempt #######


probability_first_attempt = function(df){

  wins_df = df%>%
    filter(TotalRolls == 1) %>%
    mutate(win_status = ifelse(Outcome == "win", 1, 0))

  y = (sum(wins_df$win_status/(nrow(df))))*100
  x = paste("Your winning percentage after playing 1st time",nrow(df), " games is: ", y, "%" )
  return(x)
}

## returns the probability of winning at the 1st attempt.

probability_first_attempt(simulate_craps_game(n = 100))



```

**Second Scenario**

```{r}
# 02)
######## probability of not winning at the 1st attempt, but eventually wins #######

x2 = simulate_craps_game(1000)


probability_notFirst_attempt = function(df){

  wins_df = df%>%
    filter(TotalRolls == 1) %>%
    mutate(win_status = ifelse(Outcome == "win", 1, 0))

  y = ((nrow(wins_df))/nrow(df))*100
  x = paste("Your winning percentage after not winning the 1st time",nrow(df), " games is: ", y, "%" )
  return(x)
}

probability_notFirst_attempt(x2)

```

```{r}
## winning when the point is either 4,5,6,8,9,10

library(dplyr)

summary_prob = function(point){
  game_01 = simulate_craps_game(n = 1000)
  
  if (point %in% c(4, 5, 6, 8, 9, 10)) {
    
    win_point = game_01%>%
      filter(Point == point)%>%
      filter(Outcome == "win")
    
    probability = nrow(win_point)/ nrow(game_01)
    
  }
  return(paste("chance of winning after obtaining point: ", point, "is", probability*100,"%"))
}

win4 = summary_prob(4) # chance of winning when the point is 4 
win5 = summary_prob(5) # chance of winning when the point is 5 
win6 = summary_prob(6) # chance of winning when the point is 6 
win8 = summary_prob(8) # chance of winning when the point is 8 
win9 = summary_prob(9) # chance of winning when the point is 9 
win10 = summary_prob(10) # chance of winning when the point is 10 

win4
win5
win6
win8
win9
win10



```
